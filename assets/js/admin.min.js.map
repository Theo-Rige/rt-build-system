{"version":3,"file":"admin.min.js","names":["document","querySelectorAll","querySelector","updateLatestReleaseDateDisplay","entry","date","dateContainer","dateInput","classList","remove","value","toLocaleDateString","now","Date","sixMonthsAgo","oneYearAgo","setMonth","getMonth","setFullYear","getFullYear","add","async","getLatestReleaseDate","repositoryInput","repo","url","match","extractRepoFromUrl","checkValidity","releaseDate","response","fetch","ok","data","json","published_at","error","console","fetchLatestReleaseDate","addRepeatedEntryLogic","container","itemSelector","fieldPrefix","emptyEntryNode","entryInputs","addEventListener","log","Array","from","every","input","readOnly","length","allEntries","newEntry","cloneNode","nextIndex","getNextEntryIndex","index","inputs","labels","forEach","name","includes","fieldName","id","label","getAttribute","setAttribute","updateEntryAttributes","appendChild","lastEntry","initializeRepeatedFields","config","containerSelector","entries","emptyEntry"],"sources":["admin.js"],"mappings":"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","ignoreList":[],"sourcesContent":["const librariesEntries = document.querySelectorAll('#rtbs_component_libraries .rtbs-library')\r\nconst librariesEmptyEntry = document.querySelector('#rtbs_component_libraries .rtbs-library:last-child')\r\n\r\nfunction updateLatestReleaseDateDisplay(entry, date) {\r\n\tconst dateContainer = entry.querySelector('.rtbs-library-date')\r\n\tconst dateInput = entry.querySelector('input[name*=\"[date]\"]')\r\n\r\n\tdateContainer.classList.remove('rtbs-library-date--warning', 'rtbs-library-date--danger')\r\n\r\n\tif (date) {\r\n\t\tdateInput.value = date.toLocaleDateString()\r\n\r\n\t\tconst now = new Date()\r\n\t\tconst sixMonthsAgo = new Date(now)\r\n\t\tconst oneYearAgo = new Date(now)\r\n\t\tsixMonthsAgo.setMonth(now.getMonth() - 6)\r\n\t\toneYearAgo.setFullYear(now.getFullYear() - 1)\r\n\r\n\t\tif (date < oneYearAgo) {\r\n\t\t\tdateContainer.classList.add('rtbs-library-date--danger')\r\n\t\t} else if (date < sixMonthsAgo) {\r\n\t\t\tdateContainer.classList.add('rtbs-library-date--warning')\r\n\t\t}\r\n\t} else {\r\n\t\tdateInput.value = ''\r\n\t}\r\n\r\n\tdateContainer.classList.remove('rtbs-library-date--loading')\r\n}\r\n\r\nfunction extractRepoFromUrl(url) {\r\n\tconst match = url.match(/github\\.com\\/([^\\/]+)\\/([^\\/]+)/)\r\n\treturn match ? `${match[1]}/${match[2]}` : null\r\n}\r\n\r\nasync function fetchLatestReleaseDate(repo) {\r\n\ttry {\r\n\t\tconst response = await fetch(`https://api.github.com/repos/${repo}/releases/latest`)\r\n\t\tif (response.ok) {\r\n\t\t\tconst data = await response.json()\r\n\t\t\treturn data.published_at ? new Date(data.published_at) : null\r\n\t\t}\r\n\t} catch (error) {\r\n\t\tconsole.error('Error fetching release data:', error)\r\n\t}\r\n\treturn null\r\n}\r\n\r\nasync function getLatestReleaseDate(entry, repositoryInput) {\r\n\tconst repo = extractRepoFromUrl(repositoryInput.value)\r\n\tconst dateContainer = entry.querySelector('.rtbs-library-date')\r\n\r\n\tdateContainer.classList.add('rtbs-library-date--loading')\r\n\r\n\tif (repo && repositoryInput.checkValidity()) {\r\n\t\tconst releaseDate = await fetchLatestReleaseDate(repo)\r\n\t\tupdateLatestReleaseDateDisplay(entry, releaseDate)\r\n\t} else {\r\n\t\tupdateLatestReleaseDateDisplay(entry, null)\r\n\t}\r\n}\r\n\r\nfunction getNextEntryIndex(container, itemSelector) {\r\n\tconst allEntries = container.querySelectorAll(itemSelector)\r\n\treturn allEntries.length\r\n}\r\n\r\nfunction updateEntryAttributes(entry, index, fieldPrefix) {\r\n\tconst inputs = entry.querySelectorAll('input')\r\n\tconst labels = entry.querySelectorAll('label')\r\n\r\n\tinputs.forEach((input) => {\r\n\t\tif (input.name && input.name.includes(`${fieldPrefix}[`)) {\r\n\t\t\tconst fieldName = input.name.match(/\\[([^\\]]+)\\]$/)?.[1]\r\n\t\t\tif (fieldName) {\r\n\t\t\t\tinput.name = `${fieldPrefix}[${index}][${fieldName}]`\r\n\t\t\t\tinput.id = `${fieldPrefix}[${index}][${fieldName}]`\r\n\t\t\t}\r\n\t\t}\r\n\t})\r\n\r\n\tlabels.forEach((label) => {\r\n\t\tif (label.getAttribute('for') && label.getAttribute('for').includes(`${fieldPrefix}[`)) {\r\n\t\t\tconst fieldName = label.getAttribute('for').match(/\\[([^\\]]+)\\]$/)?.[1]\r\n\t\t\tif (fieldName) {\r\n\t\t\t\tlabel.setAttribute('for', `${fieldPrefix}[${index}][${fieldName}]`)\r\n\t\t\t}\r\n\t\t}\r\n\t})\r\n}\r\n\r\nfunction addRepeatedEntryLogic(entry, container, itemSelector, fieldPrefix, emptyEntryNode) {\r\n\tconst entryInputs = entry.querySelectorAll('input')\r\n\tconst repositoryInput = entry.querySelector('input[name*=\"[repository]\"]')\r\n\r\n\tif (repositoryInput) {\r\n\t\trepositoryInput.addEventListener('blur', () => {\r\n\t\t\tconsole.log(`Fetching latest release date for repository: ${repositoryInput.value}`)\r\n\t\t\tgetLatestReleaseDate(entry, repositoryInput)\r\n\t\t})\r\n\t}\r\n\r\n\tentry.addEventListener('input', () => {\r\n\t\tconst lastEntryIsValid = Array.from(entryInputs).every(\r\n\t\t\t(input) => input.readOnly || (input.checkValidity() && input.value.length > 0)\r\n\t\t)\r\n\r\n\t\tif (lastEntryIsValid) {\r\n\t\t\tconst allEntries = container.querySelectorAll(itemSelector)\r\n\t\t\tconst lastEntry = allEntries[allEntries.length - 1]\r\n\r\n\t\t\tif (lastEntry === entry) {\r\n\t\t\t\tconst newEntry = emptyEntryNode.cloneNode(true)\r\n\t\t\t\tconst nextIndex = getNextEntryIndex(container, itemSelector)\r\n\t\t\t\tupdateEntryAttributes(newEntry, nextIndex, fieldPrefix)\r\n\t\t\t\tnewEntry.querySelectorAll('input').forEach((input) => (input.value = ''))\r\n\t\t\t\tcontainer.appendChild(newEntry)\r\n\t\t\t\taddRepeatedEntryLogic(newEntry, container, itemSelector, fieldPrefix, emptyEntryNode)\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tconst lastEntry = container.querySelector(`${itemSelector}:last-child`)\r\n\t\t\tif (lastEntry && lastEntry !== entry) {\r\n\t\t\t\tconst allInputsEmpty = Array.from(lastEntry.querySelectorAll('input')).every(\r\n\t\t\t\t\t(input) => input.value.length === 0\r\n\t\t\t\t)\r\n\r\n\t\t\t\tif (allInputsEmpty) {\r\n\t\t\t\t\tlastEntry.remove()\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t})\r\n}\r\n\r\nfunction initializeRepeatedFields(config) {\r\n\tconst { containerSelector, itemSelector, fieldPrefix } = config\r\n\r\n\tconst container = document.querySelector(`${containerSelector} .inside`)\r\n\tif (!container) return\r\n\r\n\tconst entries = container.querySelectorAll(itemSelector)\r\n\tconst emptyEntry = container.querySelector(`${itemSelector}:last-child`)\r\n\r\n\t// Initialize existing entries for repository fetching\r\n\tentries.forEach((entry) => {\r\n\t\tconst repositoryInput = entry.querySelector('input[name*=\"[repository]\"]')\r\n\t\tif (repositoryInput) {\r\n\t\t\tgetLatestReleaseDate(entry, repositoryInput)\r\n\t\t}\r\n\t})\r\n\r\n\t// Set up repeatable logic for the last entry\r\n\tif (emptyEntry) {\r\n\t\tconst emptyEntryNode = emptyEntry.cloneNode(true)\r\n\t\taddRepeatedEntryLogic(emptyEntry, container, itemSelector, fieldPrefix, emptyEntryNode)\r\n\t}\r\n}\r\n\r\n// Initialize libraries metabox\r\ninitializeRepeatedFields({\r\n\tcontainerSelector: '#rtbs-component-libraries',\r\n\titemSelector: '.rtbs-postbox-item--library',\r\n\tfieldPrefix: 'rtbs-libraries'\r\n})\r\n\r\n// Initialize references metabox\r\ninitializeRepeatedFields({\r\n\tcontainerSelector: '#rtbs-component-references',\r\n\titemSelector: '.rtbs-postbox-item--reference',\r\n\tfieldPrefix: 'rtbs-references'\r\n})\r\n"]}