{"version":3,"file":"admin.min.js","names":["librariesEntries","document","querySelectorAll","librariesEmptyEntry","querySelector","updateLatestReleaseDateDisplay","entry","date","dateContainer","dateInput","classList","remove","value","toLocaleDateString","now","Date","sixMonthsAgo","oneYearAgo","setMonth","getMonth","setFullYear","getFullYear","add","async","getLatestReleaseDate","repositoryInput","repo","url","match","extractRepoFromUrl","checkValidity","releaseDate","response","fetch","ok","data","json","published_at","error","console","fetchLatestReleaseDate","forEach","index","librariesEmptyEntryNode","cloneNode","updateEntryAttributes","inputs","labels","input","name","includes","fieldName","id","label","getAttribute","setAttribute","addLastRepeatedEntryLogic","entryInputs","addEventListener","log","Array","from","every","length","allEntries","parentNode","newEntry","appendChild"],"sources":["admin.js"],"mappings":"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","ignoreList":[],"sourcesContent":["const librariesEntries = document.querySelectorAll('#rtbs_component_libraries .rtbs-library')\r\nconst librariesEmptyEntry = document.querySelector('#rtbs_component_libraries .rtbs-library:last-child')\r\n\r\nfunction updateLatestReleaseDateDisplay(entry, date) {\r\n\tconst dateContainer = entry.querySelector('.rtbs-library-date')\r\n\tconst dateInput = entry.querySelector('input[name*=\"[date]\"]')\r\n\r\n\tdateContainer.classList.remove('rtbs-library-date--warning', 'rtbs-library-date--danger')\r\n\r\n\tif (date) {\r\n\t\tdateInput.value = date.toLocaleDateString()\r\n\r\n\t\tconst now = new Date()\r\n\t\tconst sixMonthsAgo = new Date(now)\r\n\t\tconst oneYearAgo = new Date(now)\r\n\t\tsixMonthsAgo.setMonth(now.getMonth() - 6)\r\n\t\toneYearAgo.setFullYear(now.getFullYear() - 1)\r\n\r\n\t\tif (date < oneYearAgo) {\r\n\t\t\tdateContainer.classList.add('rtbs-library-date--danger')\r\n\t\t} else if (date < sixMonthsAgo) {\r\n\t\t\tdateContainer.classList.add('rtbs-library-date--warning')\r\n\t\t}\r\n\t} else {\r\n\t\tdateInput.value = ''\r\n\t}\r\n\r\n\tdateContainer.classList.remove('rtbs-library-date--loading')\r\n}\r\n\r\nfunction extractRepoFromUrl(url) {\r\n\tconst match = url.match(/github\\.com\\/([^\\/]+)\\/([^\\/]+)/)\r\n\treturn match ? `${match[1]}/${match[2]}` : null\r\n}\r\n\r\nasync function fetchLatestReleaseDate(repo) {\r\n\ttry {\r\n\t\tconst response = await fetch(`https://api.github.com/repos/${repo}/releases/latest`)\r\n\t\tif (response.ok) {\r\n\t\t\tconst data = await response.json()\r\n\t\t\treturn data.published_at ? new Date(data.published_at) : null\r\n\t\t}\r\n\t} catch (error) {\r\n\t\tconsole.error('Error fetching release data:', error)\r\n\t}\r\n\treturn null\r\n}\r\n\r\nasync function getLatestReleaseDate(entry, repositoryInput) {\r\n\tconst repo = extractRepoFromUrl(repositoryInput.value)\r\n\tconst dateContainer = entry.querySelector('.rtbs-library-date')\r\n\r\n\tdateContainer.classList.add('rtbs-library-date--loading')\r\n\r\n\tif (repo && repositoryInput.checkValidity()) {\r\n\t\tconst releaseDate = await fetchLatestReleaseDate(repo)\r\n\t\tupdateLatestReleaseDateDisplay(entry, releaseDate)\r\n\t} else {\r\n\t\tupdateLatestReleaseDateDisplay(entry, null)\r\n\t}\r\n}\r\n\r\nlibrariesEntries.forEach((entry, index) => {\r\n\tconst repositoryInput = entry.querySelector('input[name*=\"[repository]\"]')\r\n\r\n\tif (repositoryInput) getLatestReleaseDate(entry, repositoryInput)\r\n})\r\n\r\nif (librariesEmptyEntry) {\r\n\tconst librariesEmptyEntryNode = librariesEmptyEntry.cloneNode(true)\r\n\r\n\tfunction getNextEntryIndex() {\r\n\t\tconst allEntries = document.querySelectorAll('#rtbs_component_libraries .rtbs-library')\r\n\t\treturn allEntries.length\r\n\t}\r\n\r\n\tfunction updateEntryAttributes(entry, index) {\r\n\t\tconst inputs = entry.querySelectorAll('input')\r\n\t\tconst labels = entry.querySelectorAll('label')\r\n\r\n\t\tinputs.forEach((input) => {\r\n\t\t\tif (input.name && input.name.includes('rtbs_libraries[')) {\r\n\t\t\t\tconst fieldName = input.name.match(/\\[([^\\]]+)\\]$/)?.[1]\r\n\t\t\t\tif (fieldName) {\r\n\t\t\t\t\tinput.name = `rtbs_libraries[${index}][${fieldName}]`\r\n\t\t\t\t\tinput.id = `rtbs_libraries[${index}][${fieldName}]`\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t})\r\n\r\n\t\tlabels.forEach((label) => {\r\n\t\t\tif (label.getAttribute('for') && label.getAttribute('for').includes('rtbs_libraries[')) {\r\n\t\t\t\tconst fieldName = label.getAttribute('for').match(/\\[([^\\]]+)\\]$/)?.[1]\r\n\t\t\t\tif (fieldName) {\r\n\t\t\t\t\tlabel.setAttribute('for', `rtbs_libraries[${index}][${fieldName}]`)\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t})\r\n\t}\r\n\r\n\tfunction addLastRepeatedEntryLogic(entry) {\r\n\t\tconst entryInputs = entry.querySelectorAll('input')\r\n\t\tconst repositoryInput = entry.querySelector('input[name*=\"[repository]\"]')\r\n\r\n\t\tif (repositoryInput) {\r\n\t\t\trepositoryInput.addEventListener('blur', () => {\r\n\t\t\t\tconsole.log(`Fetching latest release date for repository: ${repositoryInput.value}`)\r\n\r\n\t\t\t\tgetLatestReleaseDate(entry, repositoryInput)\r\n\t\t\t})\r\n\t\t}\r\n\r\n\t\tentry.addEventListener('input', () => {\r\n\t\t\tconst lastEntryIsValid = Array.from(entryInputs).every(\r\n\t\t\t\t(input) => input.checkValidity() && input.value.length > 0\r\n\t\t\t)\r\n\r\n\t\t\tif (lastEntryIsValid) {\r\n\t\t\t\tconst allEntries = entry.parentNode.querySelectorAll('.rtbs-library')\r\n\t\t\t\tconst lastEntry = allEntries[allEntries.length - 1]\r\n\r\n\t\t\t\tif (lastEntry === entry) {\r\n\t\t\t\t\tconst newEntry = librariesEmptyEntryNode.cloneNode(true)\r\n\t\t\t\t\tconst nextIndex = getNextEntryIndex()\r\n\t\t\t\t\tupdateEntryAttributes(newEntry, nextIndex)\r\n\t\t\t\t\tnewEntry.querySelectorAll('input').forEach((input) => (input.value = ''))\r\n\t\t\t\t\tentry.parentNode.appendChild(newEntry)\r\n\t\t\t\t\taddLastRepeatedEntryLogic(newEntry)\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tconst newEntry = entry.parentNode.querySelector('.rtbs-library:last-child')\r\n\t\t\t\tif (newEntry && newEntry !== entry) {\r\n\t\t\t\t\tconst allInputsEmpty = Array.from(newEntry.querySelectorAll('input')).every(\r\n\t\t\t\t\t\t(input) => input.value.length === 0\r\n\t\t\t\t\t)\r\n\r\n\t\t\t\t\tif (allInputsEmpty) {\r\n\t\t\t\t\t\tnewEntry.remove()\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t})\r\n\t}\r\n\r\n\taddLastRepeatedEntryLogic(librariesEmptyEntry)\r\n}\r\n"]}