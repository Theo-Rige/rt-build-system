{"version":3,"file":"component.min.js","names":["codeToHtml","Tabs","constructor","root","this","tabList","querySelector","tabs","Array","from","querySelectorAll","panels","indicator","setAttribute","forEach","tab","index","panel","tabID","id","panelId","hidden","addEventListener","event","preventDefault","selectTab","updateIndicator","selectedTab","selected","tabIndex","getAttribute","tabRect","getBoundingClientRect","listRect","style","width","left","toggleButtonState","button","className","duration","classList","add","setTimeout","remove","async","updateLibraryDates","librariesGrid","document","link","repo","url","match","extractRepoFromUrl","href","dataset","dateCell","statusCell","releaseDate","response","fetch","ok","data","json","published_at","Date","error","console","fetchLatestReleaseDate","textContent","toLocaleDateString","FormData","append","RTBS","nonce","toISOString","updateLibraryStatusRequest","ajaxUrl","method","body","updateLibraryStatusResponse","success","innerHTML","updateLibraryStatus","preview","getElementById","previewExpandButton","copyDesignButton","shareButton","codeTabs","removeAttribute","toggle","componentHTML","headers","Authorization","JSON","stringify","html","clip","clipboardDataFromAPI","text","navigator","clipboard","writeText","statusText","share","title","window","location","code","copyButton","codeContainer","lang","formattedCode","theme","colorReplacements"],"sources":["component.js"],"mappings":"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","ignoreList":[],"sourcesContent":["import { codeToHtml } from 'https://esm.sh/shiki@3.5.0'\n\nclass Tabs {\n\tconstructor(root) {\n\t\tthis.root = root\n\t\tthis.tabList = root.querySelector('.tabs-list')\n\t\tthis.tabs = Array.from(root.querySelectorAll('.tabs-trigger'))\n\t\tthis.panels = Array.from(root.querySelectorAll('.tabs-panel'))\n\t\tthis.indicator = this.tabList.querySelector('.tabs-indicator')\n\n\t\tthis.tabList.setAttribute('role', 'tablist')\n\n\t\tthis.tabs.forEach((tab, index) => {\n\t\t\ttab.setAttribute('role', 'tab')\n\t\t\ttab.setAttribute('tabindex', index === 0 ? '0' : '-1')\n\t\t\ttab.setAttribute('aria-selected', index === 0 ? 'true' : 'false')\n\n\t\t\tconst panel = this.panels[index]\n\n\t\t\tif (panel) {\n\t\t\t\tconst tabID = tab.id || `tab-${index}`\n\t\t\t\tconst panelId = panel.id || `tabpanel-${index}`\n\t\t\t\ttab.id = tabID\n\t\t\t\tpanel.id = panelId\n\t\t\t\ttab.setAttribute('aria-controls', panelId)\n\t\t\t\tpanel.setAttribute('role', 'tabpanel')\n\t\t\t\tpanel.setAttribute('aria-labelledby', tabID)\n\t\t\t\tpanel.hidden = index !== 0\n\t\t\t}\n\t\t})\n\n\t\tthis.tabs.forEach((tab) => {\n\t\t\ttab.addEventListener('click', (event) => {\n\t\t\t\tevent.preventDefault()\n\t\t\t\tthis.selectTab(tab)\n\t\t\t})\n\t\t})\n\n\t\tthis.updateIndicator(this.tabs[0])\n\t}\n\n\tselectTab(selectedTab) {\n\t\tthis.tabs.forEach((tab) => {\n\t\t\tconst selected = tab === selectedTab\n\t\t\ttab.setAttribute('aria-selected', selected)\n\t\t\ttab.tabIndex = selected ? 0 : -1\n\t\t})\n\n\t\tthis.panels.forEach((panel) => {\n\t\t\tconst tabID = selectedTab.getAttribute('aria-controls')\n\t\t\tpanel.hidden = panel.id !== tabID\n\t\t})\n\n\t\tthis.updateIndicator(selectedTab)\n\t}\n\n\tupdateIndicator(tab) {\n\t\tif (!this.indicator || !tab) return\n\t\tconst tabRect = tab.getBoundingClientRect()\n\t\tconst listRect = this.tabList.getBoundingClientRect()\n\t\tthis.indicator.style.width = `${tabRect.width}px`\n\t\tthis.indicator.style.left = `${tabRect.left - listRect.left}px`\n\t}\n}\n\nfunction toggleButtonState(button, className, duration = 2000) {\n\tbutton.classList.add(className)\n\n\tsetTimeout(() => {\n\t\tbutton.classList.remove(className)\n\t}, duration)\n}\n\nfunction extractRepoFromUrl(url) {\n\tconst match = url.match(/github\\.com\\/([^\\/]+)\\/([^\\/]+)/)\n\treturn match ? `${match[1]}/${match[2]}` : null\n}\n\nasync function fetchLatestReleaseDate(repo) {\n\ttry {\n\t\tconst response = await fetch(`https://api.github.com/repos/${repo}/releases/latest`)\n\t\tif (response.ok) {\n\t\t\tconst data = await response.json()\n\t\t\treturn data.published_at ? new Date(data.published_at) : null\n\t\t}\n\t} catch (error) {\n\t\tconsole.error('Error fetching release data:', error)\n\t}\n\treturn null\n}\n\nasync function updateLibraryStatus(statusCell, releaseDate) {\n\tif (!releaseDate) return\n\n\tconst index = statusCell.dataset.index\n\tconst data = new FormData()\n\tdata.append('action', 'rtbs_update_library_status')\n\tdata.append('_ajax_nonce', RTBS.nonce)\n\tdata.append('id', RTBS.id)\n\tdata.append('index', index)\n\tdata.append('date', releaseDate.toISOString())\n\n\tconst updateLibraryStatusRequest = await fetch(RTBS.ajaxUrl, {\n\t\tmethod: 'POST',\n\t\tbody: data\n\t})\n\n\tconst updateLibraryStatusResponse = await updateLibraryStatusRequest.json()\n\n\tif (updateLibraryStatusResponse.success) {\n\t\tstatusCell.innerHTML = updateLibraryStatusResponse.data\n\t}\n}\n\nasync function updateLibraryDates() {\n\tconst librariesGrid = document.querySelector('.grid--libraries')\n\n\tif (!librariesGrid) return\n\n\tconst libraryGitHubRepositoryLinks = librariesGrid.querySelectorAll('a.grid__cell--link[href*=\"github.com\"]')\n\n\tlibraryGitHubRepositoryLinks.forEach(async (link) => {\n\t\tconst repo = extractRepoFromUrl(link.href)\n\t\tconst index = link.dataset.index\n\n\t\tif (!repo) return\n\n\t\tconst dateCell = librariesGrid.querySelector(`.grid__cell--date[data-index=\"${index}\"]`)\n\t\tconst statusCell = librariesGrid.querySelector(`.grid__cell--status[data-index=\"${index}\"]`)\n\n\t\tif (dateCell && statusCell) {\n\t\t\ttry {\n\t\t\t\tconst releaseDate = await fetchLatestReleaseDate(repo)\n\n\t\t\t\tif (releaseDate) {\n\t\t\t\t\tdateCell.textContent = releaseDate.toLocaleDateString()\n\t\t\t\t\tupdateLibraryStatus(statusCell, releaseDate)\n\t\t\t\t}\n\t\t\t} catch (error) {\n\t\t\t\tconsole.error(`Failed to update library date for ${repo}:`, error)\n\t\t\t}\n\t\t}\n\t})\n}\n\ndocument.addEventListener('DOMContentLoaded', () => {\n\tconst preview = document.getElementById('preview')\n\tconst previewExpandButton = document.querySelector('#preview .rtbs-button--expand')\n\tconst copyDesignButton = document.querySelector('.rtbs-button--copy')\n\tconst shareButton = document.querySelector('.rtbs-button--share')\n\tconst codeTabs = document.getElementById('code')\n\n\tif (preview && previewExpandButton) {\n\t\tpreviewExpandButton.addEventListener('click', () => {\n\t\t\tpreview.removeAttribute('style')\n\t\t\tpreview.classList.toggle('expanded')\n\t\t})\n\t}\n\n\tif (copyDesignButton) {\n\t\tcopyDesignButton.addEventListener('click', async () => {\n\t\t\tconst componentHTML = preview.innerHTML\n\t\t\tconst response = await fetch('https://api.to.design/html', {\n\t\t\t\tmethod: 'POST',\n\t\t\t\theaders: {\n\t\t\t\t\t'Content-Type': 'application/json',\n\t\t\t\t\tAuthorization: 'Bearer ...'\n\t\t\t\t},\n\t\t\t\tbody: JSON.stringify({ html: componentHTML, clip: true })\n\t\t\t})\n\t\t\tif (response.ok) {\n\t\t\t\tconst clipboardDataFromAPI = await response.text()\n\t\t\t\ttry {\n\t\t\t\t\tawait navigator.clipboard.writeText(clipboardDataFromAPI)\n\t\t\t\t\ttoggleButtonState(copyDesignButton, 'copy--success')\n\t\t\t\t} catch (error) {\n\t\t\t\t\tconsole.error('Failed to copy to clipboard:', error)\n\t\t\t\t\ttoggleButtonState(copyDesignButton, 'copy--error')\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tconsole.error('Failed to fetch clipboard data from API:', response.statusText)\n\t\t\t\ttoggleButtonState(copyDesignButton, 'copy--error')\n\t\t\t}\n\t\t})\n\t}\n\n\tif (shareButton) {\n\t\tshareButton.addEventListener('click', async () => {\n\t\t\ttry {\n\t\t\t\tawait navigator.share({\n\t\t\t\t\ttitle: document.title,\n\t\t\t\t\turl: window.location.href\n\t\t\t\t})\n\t\t\t} catch (error) {\n\t\t\t\tconsole.error('Failed to share:', error)\n\t\t\t}\n\t\t})\n\t}\n\n\tif (codeTabs) {\n\t\tconst codePanels = codeTabs.querySelectorAll('.tabs-panel')\n\n\t\tcodePanels.forEach(async (panel) => {\n\t\t\tconst code = panel.querySelector('code')\n\t\t\tif (!code) return\n\n\t\t\tconst copyButton = panel.querySelector('.copy')\n\t\t\tconst codeContainer = panel.querySelector('.code')\n\n\t\t\ttry {\n\t\t\t\tconst lang = codeContainer.dataset.lang || 'javascript'\n\t\t\t\tconst formattedCode = await codeToHtml(code.textContent, {\n\t\t\t\t\tlang,\n\t\t\t\t\ttheme: 'dark-plus',\n\t\t\t\t\tcolorReplacements: { '#1e1e1e': '#0f172b' }\n\t\t\t\t})\n\n\t\t\t\tif (codeContainer) codeContainer.innerHTML = formattedCode\n\n\t\t\t\tif (copyButton) {\n\t\t\t\t\tcopyButton.addEventListener('click', async () => {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tawait navigator.clipboard.writeText(code.textContent)\n\t\t\t\t\t\t\ttoggleButtonState(copyButton, 'copy--success')\n\t\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\t\tconsole.error('Failed to copy:', error)\n\t\t\t\t\t\t\ttoggleButtonState(copyButton, 'copy--error')\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t} catch (error) {\n\t\t\t\tconsole.error('Error processing code panel:', error)\n\t\t\t}\n\t\t})\n\n\t\tnew Tabs(codeTabs)\n\t}\n\n\tupdateLibraryDates()\n})\n"]}