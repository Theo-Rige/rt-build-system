{"version":3,"file":"admin.min.js","names":["document","querySelectorAll","querySelector","updateLatestReleaseDateDisplay","entry","date","dateContainer","dateInput","classList","remove","value","toLocaleDateString","now","Date","sixMonthsAgo","oneYearAgo","setMonth","getMonth","setFullYear","getFullYear","add","addRepeatedEntryLogic","container","itemSelector","fieldPrefix","emptyEntryNode","entryInputs","addEventListener","Array","from","every","input","readOnly","checkValidity","length","allEntries","newEntry","cloneNode","nextIndex","getNextEntryIndex","index","inputs","labels","forEach","name","includes","fieldName","match","id","label","getAttribute","setAttribute","updateEntryAttributes","appendChild","lastEntry","initializeRepeatedFields","config","containerSelector","entries","emptyEntry","refreshButton","getElementById","async","e","preventDefault","disabled","textContent","window","wp","data","console","warn","postId","select","getCurrentPostId","URLSearchParams","location","search","get","formData","FormData","append","response","fetch","ajaxurl","method","body","json","success","libraries","libraryEntries","library","log","error","message","refreshLibraryDates","setTimeout"],"sources":["admin.js"],"mappings":"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","ignoreList":[],"sourcesContent":["const librariesEntries = document.querySelectorAll('#rtbs_component_libraries .rtbs-library')\nconst librariesEmptyEntry = document.querySelector('#rtbs_component_libraries .rtbs-library:last-child')\n\nfunction updateLatestReleaseDateDisplay(entry, date) {\n\tconst dateContainer = entry.querySelector('.rtbs-library-date')\n\tconst dateInput = entry.querySelector('input[name*=\"[date]\"]')\n\n\tdateContainer.classList.remove('rtbs-library-date--warning', 'rtbs-library-date--danger')\n\n\tif (date) {\n\t\tdateInput.value = date.toLocaleDateString()\n\n\t\tconst now = new Date()\n\t\tconst sixMonthsAgo = new Date(now)\n\t\tconst oneYearAgo = new Date(now)\n\t\tsixMonthsAgo.setMonth(now.getMonth() - 6)\n\t\toneYearAgo.setFullYear(now.getFullYear() - 1)\n\n\t\tif (date < oneYearAgo) {\n\t\t\tdateContainer.classList.add('rtbs-library-date--danger')\n\t\t} else if (date < sixMonthsAgo) {\n\t\t\tdateContainer.classList.add('rtbs-library-date--warning')\n\t\t}\n\t} else {\n\t\tdateInput.value = ''\n\t}\n\n\tdateContainer.classList.remove('rtbs-library-date--loading')\n}\n\nfunction extractRepoFromUrl(url) {\n\tconst match = url.match(/github\\.com\\/([^\\/]+)\\/([^\\/]+)/)\n\treturn match ? `${match[1]}/${match[2]}` : null\n}\n\n// Server-side refresh function for library dates\nasync function refreshLibraryDates() {\n\tif (!window.wp || !window.wp.data) {\n\t\tconsole.warn('WordPress data API not available')\n\t\treturn\n\t}\n\n\tconst postId = window.wp.data.select('core/editor')?.getCurrentPostId() || \n\t              new URLSearchParams(window.location.search).get('post') ||\n\t              document.querySelector('#post_ID')?.value\n\n\tif (!postId) {\n\t\tconsole.warn('Post ID not found')\n\t\treturn\n\t}\n\n\tconst formData = new FormData()\n\tformData.append('action', 'rtbs_refresh_library_dates')\n\tformData.append('id', postId)\n\tformData.append('_ajax_nonce', document.querySelector('#_wpnonce')?.value || '')\n\n\ttry {\n\t\tconst response = await fetch(window.ajaxurl || '/wp-admin/admin-ajax.php', {\n\t\t\tmethod: 'POST',\n\t\t\tbody: formData\n\t\t})\n\n\t\tconst data = await response.json()\n\t\t\n\t\tif (data.success) {\n\t\t\t// Update the UI with the new library dates\n\t\t\tconst libraries = data.data.libraries\n\t\t\tconst libraryEntries = document.querySelectorAll('#rtbs_component_libraries .rtbs-library')\n\t\t\t\n\t\t\tlibraries.forEach((library, index) => {\n\t\t\t\tconst entry = libraryEntries[index]\n\t\t\t\tif (entry && library.date) {\n\t\t\t\t\tconst dateInput = entry.querySelector('input[name*=\"[date]\"]')\n\t\t\t\t\tif (dateInput) {\n\t\t\t\t\t\tdateInput.value = library.date\n\t\t\t\t\t\tupdateLatestReleaseDateDisplay(entry, new Date(library.date))\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t})\n\t\t\t\n\t\t\tconsole.log('Library dates refreshed successfully')\n\t\t} else {\n\t\t\tconsole.error('Failed to refresh library dates:', data.data?.message)\n\t\t}\n\t} catch (error) {\n\t\tconsole.error('Error refreshing library dates:', error)\n\t}\n}\n\n// Legacy function - kept for backward compatibility but no longer auto-called\nasync function fetchLatestReleaseDate(repo) {\n\ttry {\n\t\tconst response = await fetch(`https://api.github.com/repos/${repo}/releases/latest`)\n\t\tif (response.ok) {\n\t\t\tconst data = await response.json()\n\t\t\treturn data.published_at ? new Date(data.published_at) : null\n\t\t}\n\t} catch (error) {\n\t\tconsole.error('Error fetching release data:', error)\n\t}\n\treturn null\n}\n\n// Modified function - no longer automatically fetches from GitHub\nasync function getLatestReleaseDate(entry, repositoryInput) {\n\tconst dateContainer = entry.querySelector('.rtbs-library-date')\n\n\t// Check if we already have a date\n\tconst existingDate = entry.querySelector('input[name*=\"[date]\"]').value\n\tif (existingDate && existingDate.trim() !== '') {\n\t\t// Date already exists, just update display without fetching\n\t\tupdateLatestReleaseDateDisplay(entry, new Date(existingDate))\n\t\treturn\n\t}\n\n\tdateContainer.classList.add('rtbs-library-date--loading')\n\n\t// Clear any existing date and loading state\n\tupdateLatestReleaseDateDisplay(entry, null)\n}\n\nfunction getNextEntryIndex(container, itemSelector) {\n\tconst allEntries = container.querySelectorAll(itemSelector)\n\treturn allEntries.length\n}\n\nfunction updateEntryAttributes(entry, index, fieldPrefix) {\n\tconst inputs = entry.querySelectorAll('input')\n\tconst labels = entry.querySelectorAll('label')\n\n\tinputs.forEach((input) => {\n\t\tif (input.name && input.name.includes(`${fieldPrefix}[`)) {\n\t\t\tconst fieldName = input.name.match(/\\[([^\\]]+)\\]$/)?.[1]\n\t\t\tif (fieldName) {\n\t\t\t\tinput.name = `${fieldPrefix}[${index}][${fieldName}]`\n\t\t\t\tinput.id = `${fieldPrefix}[${index}][${fieldName}]`\n\t\t\t}\n\t\t}\n\t})\n\n\tlabels.forEach((label) => {\n\t\tif (label.getAttribute('for') && label.getAttribute('for').includes(`${fieldPrefix}[`)) {\n\t\t\tconst fieldName = label.getAttribute('for').match(/\\[([^\\]]+)\\]$/)?.[1]\n\t\t\tif (fieldName) {\n\t\t\t\tlabel.setAttribute('for', `${fieldPrefix}[${index}][${fieldName}]`)\n\t\t\t}\n\t\t}\n\t})\n}\n\nfunction addRepeatedEntryLogic(entry, container, itemSelector, fieldPrefix, emptyEntryNode) {\n\tconst entryInputs = entry.querySelectorAll('input')\n\tconst repositoryInput = entry.querySelector('input[name*=\"[repository]\"]')\n\n\t// Repository input no longer automatically fetches dates on blur\n\t// Dates will be fetched when the form is saved instead\n\n\tentry.addEventListener('input', () => {\n\t\tconst lastEntryIsValid = Array.from(entryInputs).every(\n\t\t\t(input) => input.readOnly || (input.checkValidity() && input.value.length > 0)\n\t\t)\n\n\t\tif (lastEntryIsValid) {\n\t\t\tconst allEntries = container.querySelectorAll(itemSelector)\n\t\t\tconst lastEntry = allEntries[allEntries.length - 1]\n\n\t\t\tif (lastEntry === entry) {\n\t\t\t\tconst newEntry = emptyEntryNode.cloneNode(true)\n\t\t\t\tconst nextIndex = getNextEntryIndex(container, itemSelector)\n\t\t\t\tupdateEntryAttributes(newEntry, nextIndex, fieldPrefix)\n\t\t\t\tnewEntry.querySelectorAll('input').forEach((input) => (input.value = ''))\n\t\t\t\tcontainer.appendChild(newEntry)\n\t\t\t\taddRepeatedEntryLogic(newEntry, container, itemSelector, fieldPrefix, emptyEntryNode)\n\t\t\t}\n\t\t} else {\n\t\t\tconst lastEntry = container.querySelector(`${itemSelector}:last-child`)\n\t\t\tif (lastEntry && lastEntry !== entry) {\n\t\t\t\tconst allInputsEmpty = Array.from(lastEntry.querySelectorAll('input')).every(\n\t\t\t\t\t(input) => input.value.length === 0\n\t\t\t\t)\n\n\t\t\t\tif (allInputsEmpty) {\n\t\t\t\t\tlastEntry.remove()\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t})\n}\n\nfunction initializeRepeatedFields(config) {\n\tconst { containerSelector, itemSelector, fieldPrefix } = config\n\n\tconst container = document.querySelector(`${containerSelector} .inside`)\n\tif (!container) return\n\n\tconst entries = container.querySelectorAll(itemSelector)\n\tconst emptyEntry = container.querySelector(`${itemSelector}:last-child`)\n\n\t// Initialize existing entries display (but don't fetch new dates)\n\tentries.forEach((entry) => {\n\t\tconst dateInput = entry.querySelector('input[name*=\"[date]\"]')\n\t\tif (dateInput && dateInput.value) {\n\t\t\t// Update display for existing dates\n\t\t\tupdateLatestReleaseDateDisplay(entry, new Date(dateInput.value))\n\t\t}\n\t})\n\n\t// Set up repeatable logic for the last entry\n\tif (emptyEntry) {\n\t\tconst emptyEntryNode = emptyEntry.cloneNode(true)\n\t\taddRepeatedEntryLogic(emptyEntry, container, itemSelector, fieldPrefix, emptyEntryNode)\n\t}\n}\n\n// Initialize libraries metabox\ninitializeRepeatedFields({\n\tcontainerSelector: '#rtbs-component-libraries',\n\titemSelector: '.rtbs-postbox-item--library',\n\tfieldPrefix: 'rtbs-libraries'\n})\n\n// Initialize references metabox\ninitializeRepeatedFields({\n\tcontainerSelector: '#rtbs-component-references',\n\titemSelector: '.rtbs-postbox-item--reference',\n\tfieldPrefix: 'rtbs-references'\n})\n\n// Add event listener for the refresh library dates button\ndocument.addEventListener('DOMContentLoaded', () => {\n\tconst refreshButton = document.getElementById('rtbs-refresh-library-dates')\n\tif (refreshButton) {\n\t\trefreshButton.addEventListener('click', async (e) => {\n\t\t\te.preventDefault()\n\t\t\trefreshButton.disabled = true\n\t\t\trefreshButton.textContent = 'Refreshing...'\n\t\t\t\n\t\t\ttry {\n\t\t\t\tawait refreshLibraryDates()\n\t\t\t\trefreshButton.textContent = 'Refresh Complete!'\n\t\t\t\tsetTimeout(() => {\n\t\t\t\t\trefreshButton.textContent = 'Refresh Release Dates'\n\t\t\t\t\trefreshButton.disabled = false\n\t\t\t\t}, 2000)\n\t\t\t} catch (error) {\n\t\t\t\tconsole.error('Error refreshing dates:', error)\n\t\t\t\trefreshButton.textContent = 'Refresh Failed'\n\t\t\t\tsetTimeout(() => {\n\t\t\t\t\trefreshButton.textContent = 'Refresh Release Dates'\n\t\t\t\t\trefreshButton.disabled = false\n\t\t\t\t}, 2000)\n\t\t\t}\n\t\t})\n\t}\n})\n"]}